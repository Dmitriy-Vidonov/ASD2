package ex_3.test_version;
import java.util.*;

class aBST {
    public Integer Tree[]; // массив ключей

    public aBST(int depth) {
        int tree_size = getSize(depth); // вычисляем размер массива в зависимости от заданной глубины
        Tree = new Integer[tree_size];
        for(int i = 0; i < tree_size; i++) Tree[i] = null; // заполнение дерева null-ами
    }

    // Посчитать размер массива
    public int getSize(int depth) {
        int sum = 0;
        if(depth == 0) return 1;
        depth++;
        while(depth >= 0) {
            sum += (int) Math.pow(2, depth - 1);
            depth--;
        }
        return sum;
    }

    // Вывод содержимого массива на экран
    public void ShowArray() {
        for(Integer num : this.Tree) {
            System.out.print(num + " ");
        }
        System.out.println();
    }

    public Integer FindKeyIndex(int key) {
    return FindKeyHelper(0, key); // запускаем вспомогательный метод с начальным индексом 0
}

private Integer FindKeyHelper(int index, int key) {
    // если текущий индекс больше либо равен длине дерева или текущий узел пуст, то возвращаем null
    if (index >= Tree.length || Tree[index] == null) {
        return null;
    }
    // если текущий узел содержит переданный ключ, то возвращаем его индекс
    if (Tree[index] == key) {
        return index;
    }
    // определяем индексы дочерних узлов
    int leftChildIndex = 2 * index + 1;
    int rightChildIndex = 2 * index + 2;
    // если левый дочерний узел существует и его значение меньше искомого ключа, то продолжаем поиск в левом поддереве
    if (leftChildIndex < Tree.length && key < Tree[index]) {
        return FindKeyHelper(leftChildIndex, key);
    }
    // если правый дочерний узел существует и его значение больше искомого ключа, то продолжаем поиск в правом поддереве
    if (rightChildIndex < Tree.length && key > Tree[index]) {
        return FindKeyHelper(rightChildIndex, key);
    }
    // если узел с искомым ключом не найден, возвращаем null
    return null;
}

    public int AddKey(int key) {
        // Работа с корневым узлом
        if (Tree[0] == null) {
            Tree[0] = key;
            return 0;
        }

        int index = 0; // начинаем с корневого узла
        while (index < Tree.length) { // пока не вышли за пределы массива
            if (Tree[index] == null) { // если текущий элемент пуст
                Tree[index] = key; // добавляем ключ в текущий элемент
                return index; // возвращаем индекс добавленного элемента
            } else if (key < Tree[index]) { // если ключ меньше текущего элемента
                index = 2 * index + 1; // переходим к левому потомку
            } else if (key > Tree[index]) { // если ключ больше текущего элемента
                index = 2 * index + 2; // переходим к правому потомку
            } else if (key == Tree[index]) { // если ключ равен текущему элементу
                return index; // возвращаем индекс существующего элемента
            }
            else return index;
        }
        return -1; // если не удалось добавить элемент, возвращаем -1
    }
}
/*
*1-я ошибка была - типа при глубине 3 должно быть 15 элементов в массиве
* Исправлена
*
* 2-я ошибка была - AddKey() не возвращает корректный индекс добавленного элемента
* Скорее всего проверялся случай добавления дубля - данный момент скорректирован. Сделал -1 при попытке добавления дубля
* Плюс исправлен метод FindKeyIndex, который при обходе дерева некорректно проверял возможность вставки ключа в узел
*
* 3-я ошибка - AddKey() не возвращает корректный индекс существующего элемента
* мы что, при добавлении дубля должны не -1, а индекс этого элемента отображать??
* видимо да, скорее всего в словах "индекс существующего элемента" подразумевается что он показывает индекс дубля как бы
* стало быть надо будет под это условие все тесты переделать
* Сделал так, чтобы при добавления дубля возвращался индекс элемента.
*
* 4-я ошибка - AddKey() не возвращает корректный индекс добавленного элемента
* т.е. здесь проблема с возвратом индекса существующего элемента ушла. Но почему проблема с индексом добавленного
* элемента - неясно.
* UPD: После многочисленных тестов с разными условиями - понял, что не тестировал момент с обновлением значения.
* Больше мыслей нет других - в каких условиях можно получать некорректный индекс добавленного элемента.
* Типа если можно обновить значение - мы обновляем и отдаем индекс. А до этого было так - если элемент не пустой,
* то мы сразу вернули -1, типа не удалось элемент добавить и все. C другой стороны - если мы будем обновлять ключи,
* то у нас не будет ситуации, в которой мы получим -1. Т.к. нам придется обходить все дерево и мы всегда сможем обновить
* крайние узлы на новые значения, какими бы они ни были.
*/
